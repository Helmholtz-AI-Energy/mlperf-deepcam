# The MIT License (MIT)
#
# Copyright (c) 2020 NVIDIA CORPORATION. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

FROM gitlab-master.nvidia.com/dl/mlperf/optimized:language_model.pytorch.2193919
#FROM gitlab-master.nvidia.com:5005/dl/dgx/pytorch:21.03-py3-devel
#FROM gitlab-master.nvidia.com/dl/dgx/pytorch:cuda_graphs..21.04_v1-py3.2143868-devel

# install gds
COPY sys/gpudirect-storage-local-repo-ubuntu2004-cuda-11.2-0.9.1_0.9.1-1_amd64.deb /tmp/
RUN cd /tmp && dpkg-deb -x gpudirect-storage-*.deb gds && \
    cd gds/var/gpudirect-storage-local-repo-ubuntu2004-0.9.1 && \
    dpkg-deb -x libcufile-11-2_0.9.1.5-1_amd64.deb libcufile && \
    cp libcufile/etc/cufile.json /etc/ && \
    cd libcufile/usr/local/cuda-11.2/targets/x86_64-linux && \
    cp lib/libcufile.so* /usr/local/cuda/lib64/ && \
    cp lib/cufile.h /usr/local/cuda/include/ && \
    sed -i 's|\"allow_compat_mode\": false,|\"allow_compat_mode\": true,|g' /etc/cufile.json

## libibumad is a dependency of libsharp_coll.so
#RUN apt-get update && apt-get install -y --no-install-recommends \
#    libibumad3 && \
#    rm -rf /var/lib/apt/lists/*

## GDRCopy
#ENV GDRCOPY_VERSION=v2.2
#RUN cd /usr/local/src && \
#    curl --proto '=https' -fSsL "https://github.com/nvidia/gdrcopy/tarball/${GDRCOPY_VERSION}" | tar xz && \
#    cd NVIDIA-gdrcopy* && \
#    PREFIX=/usr/local DESTLIB=/usr/local/lib make -j lib_install && \
#    ldconfig

## SHARP + HCOLL
#RUN mkdir /opt/hpcx && \
#    curl -fSsL "https://content.mellanox.com/hpc/hpc-x/v2.8.1/hpcx-v2.8.1-gcc-MLNX_OFED_LINUX-5.2-2.2.0.0-ubuntu20.04-x86_64.tbz" | \
#    tar --strip-components 1 --wildcards -C /opt/hpcx -xj '*/sharp' '*/hcoll' && \
#    find /opt/hpcx -name '*.la' -delete -o -name '*.a' -delete && \
#    echo "/opt/hpcx/sharp/lib" >> /etc/ld.so.conf.d/hpcx.conf &&  \
#    echo "/opt/hpcx/hcoll/lib" >> /etc/ld.so.conf.d/hpcx.conf &&  \
#    ldconfig

## NCCL SHARP Plugin
#ENV NCCL_SHARP_PLUGIN_VERSION=hpcx-v2.8.0
#RUN cd /usr/local/src && \
#    curl --proto '=https' -fSsL https://github.com/Mellanox/nccl-rdma-sharp-plugins/archive/${NCCL_SHARP_PLUGIN_VERSION}.tar.gz | tar xz && \
#    cd nccl-rdma-sharp-plugins-${NCCL_SHARP_PLUGIN_VERSION} && \
#    ./autogen.sh &&                                            \
#    ./configure                                                \
#        --enable-shared                                        \
#        --disable-static                                       \
#        --with-ucx=/usr/local/ucx                              \
#        --with-cuda=/usr/local/cuda                            \
#        --with-sharp=/opt/hpcx/sharp &&                        \
#    make -j &&                                                 \
#    make -j install-strip &&                                   \
#    ldconfig

## SHARP stuff
#ENV SHARP_COLL_LOCK_ON_COMM_INIT 1
#ENV SHARP_COLL_NUM_COLL_GROUP_RESOURCE_ALLOC_THRESHOLD 0
#ENV SHARP_COLL_ENABLE_SAT 1
#ENV NCCL_COLLNET_ENABLE 1
#ENV SHARP_COLL_SHARPD_SOCKET_NAME sharpd_hpcx_2.4.2

# reinstall NCCL
#RUN installNCCL.sh 2.9.5

# reinstall DALI
ENV DALI_VERSION 1.0
RUN pip uninstall -y nvidia-dali-cuda110 && \
    pip uninstall -y pynvml && \
    pip install nvidia-ml-py==11.450.51 && \
    pip install --extra-index-url https://developer.download.nvidia.com/compute/redist/nightly nvidia-dali-nightly-cuda110

#Install conda prereqs
RUN conda config --add channels conda-forge \
    && conda install matplotlib basemap basemap-data-hires pillow h5py
ENV PROJ_LIB /opt/conda/share/proj

#install mpi4py
RUN pip install mpi4py

# pyprof
RUN pip install nvidia-pyindex && \
    pip install nvidia-dlprof[pytorch]

#pip install more python modules
RUN pip install wandb

#install mlperf logging
RUN pip install "git+https://github.com/mlperf/logging.git"

#install gradual warmup
RUN pip install git+https://github.com/ildoonet/pytorch-gradual-warmup-lr.git

#install torchsummary
#RUN pip install torchsummary

#update apex
RUN cd /opt && git clone https://github.com/NVIDIA/apex.git && cd apex && \
    pip uninstall -y apex && \
    pip install -v --disable-pip-version-check --no-cache-dir --global-option="--cpp_ext" --global-option="--cuda_ext" ./

# group batch norm
COPY sys/pyt-fused-layer-interface /opt/pyt-fused-layer-interface
RUN cd /opt/pyt-fused-layer-interface && python setup.py install

#copy additional stuff
COPY src/deepCam /opt/deepCam
COPY src/utils /opt/utils

#init empty git repo so that wandb works
RUN cd /opt/deepCam && git init

#copy cert:
RUN mkdir -p /opt/certs
COPY no-git/wandb_cert.key /opt/certs/.wandbirc

#create additional folders for mapping data in
RUN mkdir -p /data
